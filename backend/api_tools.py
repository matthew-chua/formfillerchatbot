from pydantic.v1 import BaseModel, Field
from langchain.chains import ConversationChain
from langchain.chat_models import ChatOpenAI
from langchain.tools import tool

import firebase_admin
from firebase_admin import credentials
from firebase_admin import storage

import os
import json
import subprocess
# from forms import forms
cred = credentials.Certificate("./key.json")  # Path to your service account JSON file
firebase_admin.initialize_app(cred, {'storageBucket': 'cloud-42617.appspot.com'})
with open("forms.json", 'r+') as file:
    # Read the list from the file
        forms = json.load(file)
class Formdeets(BaseModel):
    Formdeets: str = Field(
        description = "Details of the form the user would like to fill"
    )

class Form(BaseModel):
    Form: str = Field(
        description = "name of the form the user is looking for"
    )
class latex(BaseModel):
    name: str = Field(
    description = "name of the file"
    )
    latex: str = Field(
    description = "latex of the form"
    )

@tool("identify_form", return_direct=False, args_schema=Formdeets)
def get_form_tool(Formdeets: str) -> str:
    """use this tool to identify what form the user needs to fill"""
    ###code here should take formdeets and find the right form
    chat = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0.3, openai_api_key=os.getenv("OPENAI_API_KEY"))

    conversation = ConversationChain(
    llm = chat,
    verbose=True
    )
    form = conversation(
        f"Given this list of forms {forms}, and that the user is trying to find a form for {Formdeets}, which form should he use? Return only the name of the form"
    )["response"]
    return form

@tool("open_form", return_direct=False, args_schema=Form)
def open_form_tool(Form: str) -> str:
    """use this tool to open a specific latex form that you require. It returns the entire latex form."""
    with open(f"./files/{Form}", 'r', encoding='utf-8') as file:
        # Read the contents of the file
        file_contents = file.read()
        return file_contents

@tool("create_PDF_from_latex", return_direct=False, args_schema=latex)
def create_PDF_from_latex_tool(latex:str, name: str):
    """use this tool to generate a pdf form from latex content"""

    with open(f'{name}.tex', 'w') as file:
        file.write(latex)

    # Compile the .tex file to PDF using pdflatex
    # This command might need to be adjusted depending on your LaTeX installation and operating system
    subprocess.run(['pdflatex', f'{name}.tex'])

    # Clean up auxiliary files generated by LaTeX (optional)
    # You might need to adjust this list depending on the packages used in your LaTeX document
    for ext in ('.aux', '.log', '.out'):
        try:
            os.remove(f'document{ext}')
        except OSError:
            pass
    
    print("Uploading PDF...")
    # Initialize Firebase Admin SDK

    # Get a reference to the storage service, which is used to create references in your storage bucket
    bucket = storage.bucket()

    # Path to the local file you want to upload
    local_file_path = f"./{name}.pdf"

    # Destination path in Firebase Storage
    destination_blob_name = "document.pdf"  # Change this to your desired path in Firebase Storage

    # Upload the file
    blob = bucket.blob(destination_blob_name)
    blob.upload_from_filename(local_file_path)
    print("File uploaded successfully to Firebase Storage.")
    url = blob.generate_signed_url(
    version="v4",
    # This URL is valid for 15 minutes
    expiration=3600,
    # Allow GET requests using this URL.
    method="GET",)
    print("URL: ", url)
    return url

tools = [open_form_tool, create_PDF_from_latex_tool]

# def create_PDF_from_latex_tool(latex:str):
#     """use this tool to generate a pdf form from latex content, you get the url to that document."""

#     with open('document.tex', 'w') as file:
#         file.write(latex)

#     # Compile the .tex file to PDF using pdflatex
#     # This command might need to be adjusted depending on your LaTeX installation and operating system
#     # subprocess.run(['pdflatex', 'document.tex'])
#     os.system("pdflatex document.tex")
#     # Clean up auxiliary files generated by LaTeX (optional)
#     # You might need to adjust this list depending on the packages used in your LaTeX document
#     for ext in ('.aux', '.log', '.out'):
#         try:
#             os.remove(f'document{ext}')
#         except OSError:
#             pass
#     cred = credentials.Certificate("./key.json")  # Path to your service account JSON file
#     firebase_admin.initialize_app(cred, {'storageBucket': 'cloud-42617.appspot.com'})
#     print("Uploading PDF...")
#     # Initialize Firebase Admin SDK

#     # Get a reference to the storage service, which is used to create references in your storage bucket
#     bucket = storage.bucket()

#     # Path to the local file you want to upload
#     local_file_path = "./document.pdf"

#     # Destination path in Firebase Storage
#     destination_blob_name = "document.pdf"  # Change this to your desired path in Firebase Storage

#     # Upload the file
#     blob = bucket.blob(destination_blob_name)
#     blob.upload_from_filename(local_file_path)
#     print("File uploaded successfully to Firebase Storage.")
#     url = blob.generate_signed_url(
#     version="v4",
#     # This URL is valid for 15 minutes
#     expiration=3600,
#     # Allow GET requests using this URL.
#     method="GET",)
#     print("URL: ", url)
#     return url

# create_PDF_from_latex_tool(r"""
# \documentclass{article}
# \begin{document}
# Hello, world!
# \end{document}
# """)